/*
 * $Id$
 * 
 * Copyright 2007-2009 RedFlagSoft.CN All Rights Reserved.
 * RedFlagSoft PROPRIETARY/CONFIDENTIAL.
 *
 * 未经深圳市红旗信息技术有限公司许可，任何人不得擅自（包括但不限于：
 * 以非法的方式复制、传播、展示、镜像、上载、下载、引用）使用。
 */
package cn.redflagsoft.base.service.impl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.opoo.ndao.ObjectNotFoundException;
import org.opoo.ndao.support.ResultFilter;
import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

import com.google.common.collect.Lists;

import cn.redflagsoft.base.bean.Clerk;
import cn.redflagsoft.base.bean.SelectResult;
import cn.redflagsoft.base.bean.SelectDataSource;
import cn.redflagsoft.base.dao.SelectDataSourceDao;
import cn.redflagsoft.base.service.SelectDataSourceService;

public class SelectDataSourceServiceImpl implements SelectDataSourceService, ApplicationContextAware {
	private static final Log log = LogFactory.getLog(SelectDataSourceServiceImpl.class);
	
	private SelectDataSourceDao selectDataSourceDao;
	private List<SelectDataHandler<?>> selectDataHandlers;

	public SelectDataSourceDao getSelectDataSourceDao() {
		return selectDataSourceDao;
	}

	public void setSelectDataSourceDao(SelectDataSourceDao selectDataSourceDao) {
		this.selectDataSourceDao = selectDataSourceDao;
	}
	public List<SelectDataHandler<?>> getSelectDataHandlers() {
		return selectDataHandlers;
	}

	public void setSelectDataHandlers(List<SelectDataHandler<?>> selectDataHandlers) {
		this.selectDataHandlers = selectDataHandlers;
	}
	public SelectResult findSelectResult(String selectId) {
		return findSelectResult(selectId, null);
	}
	
	/* (non-Javadoc)
	 * @see cn.redflagsoft.base.service.SelectDataSourceService#findSelectData(java.lang.String, org.opoo.ndao.support.ResultFilter)
	 */
	public SelectResult findSelectResult(String selectId, ResultFilter filter) {
		SelectDataSource dataSource = getSelectDataSourceDao().getBySelectId(selectId);
		if(dataSource == null){
			log.warn("没有相关的选择器配置：" + selectId);
			//return Collections.emptyList();
			throw new ObjectNotFoundException("没有相关的选择器配置：" + selectId);
		}else{
			if(log.isDebugEnabled()){
				log.debug("选择器数据源配置: " + dataSource);
			}
		}
		List<?> list = findSelectData(dataSource, filter);
		
		return new SelectResult(list, dataSource);
	}
	

	public List<?> findSelectData(SelectDataSource dataSource, ResultFilter filter){
		for (SelectDataHandler<?> h : selectDataHandlers) {
			if(h.supports(dataSource)){
				return filter(h.findSelectData(dataSource, filter));
			}
		}
		log.error("没有相关的选择数据查询器：" + dataSource);
		return Collections.emptyList();
	}

	private List<?> filter(List<?> list){
		if(!list.isEmpty() && list.get(0) instanceof Clerk){
			List<Object> newList = Lists.newArrayList();
			for(Object o: list){
				Clerk clerk = (Clerk) o;
				//非禁用的才能选出来
				if(clerk.getStatus() == 0){
					newList.add(clerk);
				}else{
					log.debug("当前用户状态是禁用的，被过滤掉：" + clerk);
				}
			}
			return newList;
		}
		return list;
	}
	
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		@SuppressWarnings("unchecked")
		Map<String, SelectDataHandler<?>> map = applicationContext.getBeansOfType(SelectDataHandler.class);
		if(!map.isEmpty()){
			List<SelectDataHandler<?>> beans = new ArrayList<SelectDataHandler<?>>(map.values());
			setSelectDataHandlers(beans);
		}else{
			setSelectDataHandlers(new ArrayList<SelectDataHandler<?>>());
		}
	}
}
