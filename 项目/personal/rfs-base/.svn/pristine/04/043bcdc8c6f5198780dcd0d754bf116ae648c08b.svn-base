/*
 * $Id$
 * 
 * Copyright 2007-2009 RedFlagSoft.CN All Rights Reserved.
 * RedFlagSoft PROPRIETARY/CONFIDENTIAL.
 *
 * 未经深圳市红旗信息技术有限公司许可，任何人不得擅自（包括但不限于：
 * 以非法的方式复制、传播、展示、镜像、上载、下载、引用）使用。
 */
package cn.redflagsoft.base.support;

import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.opoo.apps.QueryParameter.Operator;
import org.opoo.apps.query.impl.HibernateParametersBuilder;
import org.opoo.apps.query.util.QueryUtils;
import org.opoo.ndao.criterion.Criterion;
import org.opoo.ndao.criterion.Logic;
import org.opoo.ndao.criterion.Restrictions;
import org.opoo.ndao.criterion.SimpleExpression;

/**
 * @author Alex Lin(lcql@msn.com)
 *
 */
public class RFSParametersBuilder extends HibernateParametersBuilder {
	private static final Log log = LogFactory.getLog(RFSParametersBuilder.class);

	@Override
	public void afterPropertiesSet() throws Exception {
		super.afterPropertiesSet();
		
		Map<Operator, CriterionBuilder> builders = getBuilders();
		CriterionBuilder notNullBuilder = builders.get(Operator.NOTNULL);
		CriterionBuilder nullBuilder = builders.get(Operator.NULL);
		
		builders.put(Operator.EQ, new NewEQBuilder(nullBuilder, notNullBuilder));
	}
	
	class NewEQBuilder implements CriterionBuilder{
		
		private CriterionBuilder nullBuilder;// = new NullBuilder();
		private CriterionBuilder notNullBuilder;// = new NotNullBuilder();

		NewEQBuilder(CriterionBuilder nullBuilder, CriterionBuilder notNullBuilder){
			this.nullBuilder = nullBuilder;
			this.notNullBuilder = notNullBuilder;
		}
		
		public Criterion buildCriterion(Object bean, String name, String value,	Class<?> targetType) {
			//null
			if(value == null){
				return null;
				//return nullBuilder.buildCriterion(bean, name, value, targetType);
			}
			//null
			if("__NULL__".equalsIgnoreCase(value) || "<null>".equalsIgnoreCase(value)){
				return nullBuilder.buildCriterion(bean, name, value, targetType);
			}
			//not null
			if ("__NOTNULL__".equalsIgnoreCase(value) || "<notnull>".equalsIgnoreCase(value)){
				return notNullBuilder.buildCriterion(bean, name, value, targetType);
			}	
			Object value2 = QueryUtils.convertSingleValue(value, targetType);
			if(value2 == null){
				throw new IllegalArgumentException("查询参数不正确");
			}
			
			//如果名称中有逗号分割
			if(name.indexOf(',') != -1){
				log.info("查询参数包含分割符，处理 or 字句： " + name);
				String[] names = QueryUtils.getInputStrings(name);
				
				if(names.length == 1){
					return Restrictions.eq(names[0], value2);
				}else if(names.length > 1){	
					Logic logic = null;
					for(String n: names){
						SimpleExpression c = Restrictions.eq(n, value2);
						if(logic == null){
							logic = Restrictions.logic(c);
						}else{
							logic = logic.or(c);
						}
					}
					log.debug("OR 字句：" + logic);
					return logic;
				}else{
					throw new IllegalArgumentException("查询参数不正确: " + name); 
				}
			}
			
			
			return Restrictions.eq(name, value2);
		}
	}
	
//	private static final Log log = LogFactory.getLog(RFSParametersBuilder.class);
//	
//	/* (non-Javadoc)
//	 * @see org.opoo.apps.query.impl.AbstractParametersBuilder#buildParameters(java.lang.Object, org.opoo.apps.QueryParameters, java.lang.String[], java.lang.Class<?>[])
//	 */
//	@Override
//	public Object[] buildParameters(Object bean, QueryParameters parameters, String[] parameterNames, Class<?>[] parameterTypes) {
//		if(isRequireResolveQueryParameters(parameters)){
//			parameters = resolveQueryParameters((RFSQueryParameters)parameters);
//		}
//		return super.buildParameters(bean, parameters, parameterNames, parameterTypes);
//	}
//
//	/* (non-Javadoc)
//	 * @see org.opoo.apps.query.impl.AbstractParametersBuilder#buildResultFilter(java.lang.Object, org.opoo.apps.QueryParameters)
//	 */
//	@Override
//	public ResultFilter buildResultFilter(Object bean, QueryParameters parameters) {
//		//没解析过，并且需要解析
//		if(!(parameters instanceof DummyRFSQueryParameters) && isRequireResolveQueryParameters(parameters)){
//			parameters = resolveQueryParameters((RFSQueryParameters)parameters);
//		}
//		return super.buildResultFilter(bean, parameters);
//	}
//	
//	//判断指定参数是否需要解析
//	private boolean isRequireResolveQueryParameters(QueryParameters parameters){
//		if (parameters instanceof RFSQueryParameters) {
//			RFSQueryParameters params = (RFSQueryParameters) parameters;
//			List<String> eps = params.getEps();
//			if(eps != null && !eps.isEmpty()){
//				return true;
//			}
//			
//			List<String> ups = params.getUps();
//			if(ups != null && !ups.isEmpty()){
//				return true;
//			}
//		}
//		return false;
//	}
//	
//	private QueryParameters resolveQueryParameters(RFSQueryParameters params){
//		DummyRFSQueryParameters result = new DummyRFSQueryParameters(params);
//		//RFSQueryParameters params = (RFSQueryParameters) parameters;
//		List<String> eps = params.getEps();
//		List<String> ups = params.getUps();
//		if(eps != null && !eps.isEmpty()){
//			Clerk clerk = UserClerkHolder.getClerk();
//			String clerkEntityID = "" + clerk.getEntityID();
//			for(String ep: eps){
//				addParameter(result, ep, clerkEntityID);
//			}
//		}
//		if(ups != null && !ups.isEmpty()){
//			User user = UserHolder.getUser();
//			String userId = "" + user.getUserId();
//			for(String up: ups){
//				addParameter(result, up, userId);
//			}
//		}
//		
//		if(log.isDebugEnabled()){
//			log.debug("用户或者单位相关的查询参数合并后的原始参数为：" + result.getRawParameters());
//			log.debug("用户或者单位相关的查询参数合并后的查询参数为：" + result.getParameters());
//		}
//		return result;
//	}
//
//
//	/**
//	 * @param result
//	 * @param ep
//	 * @param entityID
//	 */
//	private void addParameter(DummyRFSQueryParameters result, String name, String value) {
//		//设置到原始参数中
//		result.getRawParameters().put(name, value);
//		
//		//设置到查询参数中
//		result.getParameters().add(new QueryParameter(name, value, "=", "long"));
//	}
	
	
}
