/*
 * $Id$
 * 
 * Copyright 2007-2009 RedFlagSoft.CN All Rights Reserved.
 * RedFlagSoft PROPRIETARY/CONFIDENTIAL.
 *
 * 未经深圳市红旗信息技术有限公司许可，任何人不得擅自（包括但不限于：
 * 以非法的方式复制、传播、展示、镜像、上载、下载、引用）使用。
 */
package cn.redflagsoft.base.listener;

import java.util.Map;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.opoo.apps.event.v2.EventDispatcher;
import org.opoo.apps.event.v2.EventDispatcherAware;
import org.opoo.apps.event.v2.EventListener;
import org.opoo.ndao.support.ResultFilter;

import cn.redflagsoft.base.bean.LifeStage;
import cn.redflagsoft.base.bean.ObjectTask;
import cn.redflagsoft.base.bean.Task;
import cn.redflagsoft.base.bean.TaskDefinition;
import cn.redflagsoft.base.dao.LifeStageDao;
import cn.redflagsoft.base.dao.ObjectTaskDao;
import cn.redflagsoft.base.dao.TaskDefinitionDao;
import cn.redflagsoft.base.event2.LifeStageUpdateEvent;
import cn.redflagsoft.base.event2.TaskEvent;
import cn.redflagsoft.base.event2.LifeStageUpdateEvent.LifeStageInfo;

/**
 * 用来同步Task和LifeStage状态的事件监听器。
 * 
 * @author Alex Lin(alex@opoo.org)
 *
 */
public class HandleLifeStageTaskEventListener implements EventListener<TaskEvent>, EventDispatcherAware {
	private TaskDefinitionDao taskDefinitionDao;
	private ObjectTaskDao objectTaskDao;
	private EventDispatcher eventDispatcher;
	private LifeStageDao lifeStageDao;
	
	private Map<Integer, TaskDefinition> taskDefs;
	private static final Log log = LogFactory.getLog(HandleLifeStageTaskEventListener.class);
	
	
	/**
	 * @return the taskDefinitionDao
	 */
	public TaskDefinitionDao getTaskDefinitionDao() {
		return taskDefinitionDao;
	}


	/**
	 * @param taskDefinitionDao the taskDefinitionDao to set
	 */
	public void setTaskDefinitionDao(TaskDefinitionDao taskDefinitionDao) {
		this.taskDefinitionDao = taskDefinitionDao;
	}


	/**
	 * @return the objectTaskDao
	 */
	public ObjectTaskDao getObjectTaskDao() {
		return objectTaskDao;
	}


	/**
	 * @param objectTaskDao the objectTaskDao to set
	 */
	public void setObjectTaskDao(ObjectTaskDao objectTaskDao) {
		this.objectTaskDao = objectTaskDao;
	}

	/**
	 * @return the lifeStageDao
	 */
	public LifeStageDao getLifeStageDao() {
		return lifeStageDao;
	}

	/**
	 * @param lifeStageDao the lifeStageDao to set
	 */
	public void setLifeStageDao(LifeStageDao lifeStageDao) {
		this.lifeStageDao = lifeStageDao;
	}


	/* (non-Javadoc)
	 * @see org.opoo.apps.event.v2.EventListener#handle(org.opoo.apps.event.v2.Event)
	 */
	public void handle(TaskEvent event) {
		Task task = event.getSource();
		byte status = task.getStatus();
		
		if(event.getType() == TaskEvent.Type.DELETED){
			//log.debug("删除task事件，不处理状态同步。");
			//return;
			log.debug("删除task事件，同步状态为0。");
			status = Task.STATUS_待办;
		}
		
		//Cache task def
		if(taskDefs == null){
			taskDefs = taskDefinitionDao.findTaskDefinitionsMap(ResultFilter.createEmptyResultFilter());
		}
		TaskDefinition definition = taskDefs.get(task.getType());
		
		//System.out.println("＝＝＝＝＝＝＝＝＝＝＝＝＝＞" + definition != null ? definition.getLifeStageFieldName() : "");
		if(definition != null && StringUtils.isNotBlank(definition.getLifeStageFieldName())){
			
			if(log.isDebugEnabled()){
				log.debug("需要同步 LifeStage 信息：" + definition.getLifeStageFieldName() 
						+ "/task="	+ task.getName() + "(" + task.getSn() + ")" 
						+ "/object=" + task.getRefObjectName() 
						+ "(" + task.getRefObjectId() + "/" + task.getRefObjectType() + "): " + status);
			}
			
			Long objectId = null;
			
			/*
			//TODO 可能不这么查
			//1
			ObjectTask objectTask = objectTaskDao.get(Restrictions.eq("taskSN", task.getSn()));
			if(objectTask == null){
				throw new IllegalArgumentException("找不到 Task 对应的 业务对象objectTask：taskSN=" + task.getSn());
			}
			objectId = objectTask.getObjectID();
			*/
			//2 在新的处理体系中，refObjectId就是相关对象ID
			objectId = task.getRefObjectId();
			
			
			
			//使用对象处理方式更能有效利用缓存
//			String hql = "update LifeStage set " + definition.getLifeStageFieldName() + "=? where id=?";
//			
//			int i = ((HibernateDao<?, ?>) objectTaskDao).getQuerySupport()
//				.executeUpdate(hql, new Object[]{task.getStatus(), objectTask.getObjectID()});
			
			
			LifeStage ls = lifeStageDao.get(objectId/*objectTask.getObjectID()*/);
			int i = 0;
			if(ls != null){
				try {
					PropertyUtils.setProperty(ls, definition.getLifeStageFieldName(), status);
					lifeStageDao.update(ls);
					i = 1;
				} catch (Exception e) {
					log.error("同步更新LifeStage出错", e);
				}
			}
			
			log.info(String.format("Task(sn=%s)发生变化，同步更新了 %s 个 LifeStage 的 %s 属性为  %s，相关业务对象的id为 '%s'。", 
					task.getSn(), i, definition.getLifeStageFieldName(), status, objectId));

			
			//派发LifeStageEvent事件
			if(i > 0 && eventDispatcher != null){
				if(log.isDebugEnabled()){
					log.debug("派发 LifeStageEvent 事件");
				}
				
				//Builder new ObjectTask
				ObjectTask objectTask = new ObjectTask();
				objectTask.setObjectID(objectId);
				objectTask.setTaskSN(task.getSn());
				
				LifeStageInfo stageInfo = new LifeStageInfo(task, definition, objectTask);
				LifeStageUpdateEvent e = new LifeStageUpdateEvent(LifeStageUpdateEvent.Type.UPDATED, stageInfo);
				eventDispatcher.dispatchEvent(e);
			}
			

			//更新task的visibility，阶段性质的的不显示
			if(event.getType() == TaskEvent.Type.CREATED){
				//task.setVisibility(Task.VISIBILITY_UNQUALIFIED);
				//Application.getContext().get("taskDao", TaskDao.class).update(task);
			}
		}else{
			if(log.isDebugEnabled()){
				if(definition == null){
					log.warn("Task(" + task + ")没有TaskDefinition配置");
				}else{
					log.debug("Task(" + task + ")的LifeStageFieldName为空，不同步状态到LifeStage。");
				}
			}
		}
	}

	

	/* (non-Javadoc)
	 * @see org.opoo.apps.event.v2.EventDispatcherAware#setEventDispatcher(org.opoo.apps.event.v2.EventDispatcher)
	 */
	public void setEventDispatcher(EventDispatcher eventDispatcher) {
		this.eventDispatcher = eventDispatcher;
		log.debug("设置事件转发器：" + eventDispatcher);
	}

	public EventDispatcher getEventDispatcher() {
		return eventDispatcher;
	}
}

