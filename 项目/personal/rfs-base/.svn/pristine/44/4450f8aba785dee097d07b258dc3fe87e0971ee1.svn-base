/*
 * $Id$
 * 
 * Copyright 2007-2008 RedFlagSoft.CN All Rights Reserved.
 * RedFlagSoft PROPRIETARY/CONFIDENTIAL.
 *
 * 未经深圳市红旗信息技术有限公司许可，任何人不得擅自（包括但不限于：
 * 以非法的方式复制、传播、展示、镜像、上载、下载、引用）使用。
 */
package cn.redflagsoft.base.scheme;

import java.util.List;

import cn.redflagsoft.base.bean.RFSObject;
import cn.redflagsoft.base.bean.Task;
import cn.redflagsoft.base.bean.Work;

/**
 * Matters的处理器。
 * 
 * @author Alex Lin
 *
 */
public interface MattersHandler {

	/**
	 * 事项受理（批量）。
	 * @param task
	 * @param work
	 * @param object
	 * @param matterIds
	 */
	void acceptMatters(Task task, Work work, RFSObject object, Long[] matterIds);
	/**
	 * 事项受理。
	 * @param task
	 * @param work
	 * @param object
	 * @param matterId
	 */
	void acceptMatter(Task task, Work work, RFSObject object, Long matterId);
	void acceptMatter(Task task, Work work, RFSObject object, Long matterId,short tag);
	
	/**
	 * 事项办结。
	 * 
	 * @param task
	 * @param work
	 * @param object
	 * @param matterIds
	 */
	void readyMatters(Task task, Work work, RFSObject object, Long[] matterIds);
	
	/**
	 * 事项办结。
	 * 
	 * @param task
	 * @param work
	 * @param object
	 * @param matterId
	 */
	void readyMatter(Task task, Work work, RFSObject object, Long matterId);
	void readyMatter(Task task, Work work, RFSObject object, Long matterId,short tag);
	
	/**
	 * 结束事项（批量）。
	 * 
	 * @param task
	 * @param work
	 * @param object
	 * @param matterIds
	 */
	void finishMatters(Task task, Work work, RFSObject object, Long[] matterIds);
	/**
	 * 结束事项。
	 * 
	 * @param task
	 * @param work
	 * @param object
	 * @param matterId
	 */
	void finishMatter(Task task, Work work, RFSObject object, Long matterId);
	void finishMatter(Task task, Work work, RFSObject object, Long matterId,short tag);
	void finishMatter(Task task, Work work, RFSObject object,Long matterId,short tag,String note); 
	void finishMatters(Task task, Work work, RFSObject object,Long[] matterIds,String note);
//	/**
//	 * 
//	 * @param ws
//	 * @param tag
//	 * @param note
//	 */
//	void finishMatters(WorkScheme ws, short tag, String note);
//	void finishMatters(Task task, Work work, RFSObject object,
//			Long[] matterIds, short tag, String note,
//			List<RFSItemable> relatedItems) ;
	
	/**
	 * 暂停时执行
	 * @param work
	 * @param object
	 * @param matterId
	 */
	void hang(Work work, RFSObject object, List<Long> matterIds);
	void hang(Work work, RFSObject object, List<Long> matterIds,short tag);
	/**
	 * 唤醒、重启时执行
	 * @param work
	 * @param object
	 * @param matterId
	 */
	void wake(Work work, RFSObject object, List<Long> matterIds);
	void wake(Work work, RFSObject object, List<Long> matterIds,short tag);

	/**
	 * 免办
	 * @param work
	 * @param object
	 * @param matterIds
	 */
	void avoid(Work work, RFSObject object, List<Long> matterIds);
	void avoid(Work work, RFSObject object, List<Long> matterIds, short tag);
	/**
	 * 取消
	 * @param work
	 * @param object
	 * @param matterIds
	 */
	void cancel(Work work, RFSObject object, List<Long> matterIds);
	void cancel(Work work, RFSObject object, List<Long> matterIds, short tag);
	
	/**
	 * 中止
	 * @param work
	 * @param object
	 * @param matterIds
	 */
	void stop(Work work, RFSObject object, List<Long> matterIds);
	void stop(Work work, RFSObject object, List<Long> matterIds, short tag);
	
	/**
	 * 撤回
	 * @param work
	 * @param object
	 * @param matterIds
	 */
	void withdraw(Work work, RFSObject object, List<Long> matterIds);
	void withdraw(Work work, RFSObject object, List<Long> matterIds, short tag);
	
	/**
	 * 驳回
	 * @param work
	 * @param object
	 * @param matterIds
	 */
	void reject(Work work, RFSObject object, List<Long> matterIds);
	void reject(Work work, RFSObject object, List<Long> matterIds, short tag);

	/**
	 * 转出
	 * @param work
	 * @param object
	 * @param matterIds
	 */
	void transfer(Work work, RFSObject object, List<Long> matterIds);
	void transfer(Work work, RFSObject object, List<Long> matterIds, short tag);
	
	/**
	 * 撤销
	 * @param work
	 * @param object
	 * @param matterIds
	 */
	void undo(Work work, RFSObject object, List<Long> matterIds);
	void undo(Work work, RFSObject object, List<Long> matterIds, short tag);
}
