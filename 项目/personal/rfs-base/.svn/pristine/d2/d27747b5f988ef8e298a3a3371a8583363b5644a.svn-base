/*
 * $Id$
 * 
 * Copyright 2007-2009 RedFlagSoft.CN All Rights Reserved.
 * RedFlagSoft PROPRIETARY/CONFIDENTIAL.
 *
 * 未经深圳市红旗信息技术有限公司许可，任何人不得擅自（包括但不限于：
 * 以非法的方式复制、传播、展示、镜像、上载、下载、引用）使用。
 */
package cn.redflagsoft.base.security.impl;

import java.io.Serializable;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.opoo.apps.event.v2.EventDispatcher;
import org.opoo.apps.event.v2.EventDispatcherAware;
import org.opoo.apps.security.Group;
import org.opoo.apps.security.GroupManager;
import org.opoo.apps.security.User;
import org.opoo.apps.security.UserManager;
import org.opoo.cache.Cache;
import org.springframework.dao.DataAccessException;

import cn.redflagsoft.base.security.PermissionType;
import cn.redflagsoft.base.security.Permissions;
import cn.redflagsoft.base.security.PermissionsManager;
import cn.redflagsoft.base.security.impl.dao.Perms;
import cn.redflagsoft.base.security.impl.dao.PermsDao;
import cn.redflagsoft.base.util.LongList;

/**
 * 权限管理器。
 * 
 * <p>该版实现以ACE ID为主键进行缓存，只需要一个缓存器。
 * 
 * @author Alex Lin(alex@opoo.org)
 *
 */
public class PermissionsManagerImpl2 implements PermissionsManager, EventDispatcherAware{
	private static final Log log = LogFactory.getLog(PermissionsManagerImpl2.class);
	private Cache<String,PermissionsCacheEntry> permsCache;
	private EventDispatcher eventDispatcher;
	private PermsDao permsDao;
	private UserManager userManager;
	private GroupManager groupManager;

	public Cache<String, PermissionsCacheEntry> getPermsCache() {
		return permsCache;
	}
	public void setPermsCache(Cache<String, PermissionsCacheEntry> permsCache) {
		this.permsCache = permsCache;
	}
	public PermsDao getPermsDao() {
		return permsDao;
	}
	public void setPermsDao(PermsDao permsDao) {
		this.permsDao = permsDao;
	}
	public UserManager getUserManager() {
		return userManager;
	}
	public void setUserManager(UserManager userManager) {
		this.userManager = userManager;
	}
	public GroupManager getGroupManager() {
		return groupManager;
	}
	public void setGroupManager(GroupManager groupManager) {
		this.groupManager = groupManager;
	}
	public EventDispatcher getEventDispatcher(){
		return eventDispatcher;
	}
	
	
	public void addUserPermission(User user, String aceId, PermissionType permissionType, long permission) {
		PermissionsCacheEntry bundle = getPermissionsCacheEntry(aceId);
		long perms = bundle.getUserPerms(user.getUserId(), permissionType);
		//not set
		if((perms & permission) == 0){
			addUserPermission(user.getUserId(), aceId, permissionType, permission);
		}
	}
	protected void addUserPermission(long userId, String aceId, PermissionType permissionType, long permission) {
		checkPermission(permission);
		permsDao.addUserPermission(userId, aceId, permissionType.getId(), permission);
		permsCache.remove(aceId);
	}

	public void removeUserPermission(User user, String aceId, PermissionType permissionType, long permission) {
		checkPermission(permission);
		permsDao.removeUserPermission(user.getUserId(), aceId, permissionType.getId(), permission);
		permsCache.remove(aceId);
	}

	public void removeAllUserPermissions(String aceId, PermissionType permissionType) {
		permsDao.removeAllUserPermissions(aceId, permissionType.getId());
		permsCache.remove(aceId);
	}

	public void addGroupPermission(Group group, String aceId, PermissionType permissionType, long permission) {
		checkPermission(permission);
		permsDao.addGroupPermission(group.getId(), aceId, permissionType.getId(), permission);
		permsCache.remove(aceId);
	}

	public void removeGroupPermission(Group group, String aceId, PermissionType permissionType, long permission) {
		checkPermission(permission);
		permsDao.removeGroupPermission(group.getId(), aceId, permissionType.getId(), permission);
		permsCache.remove(aceId);
	}

	public void removeAllGroupPermissions(String aceId, PermissionType permissionType) {
		permsDao.removeAllGroupPermissions(aceId, permissionType.getId());
		permsCache.remove(aceId);
	}

	public Permissions getFinalUserPerms(long userId, String aceId, PermissionType permissionType) {
		 // get the permissions bundle
        PermissionsCacheEntry bundle = getPermissionsCacheEntry(aceId);
        // Start with anonymous permissions.
        long permissions = bundle.getUserPerms(userId, permissionType);
        // Next, add in permissions for all groups the user belongs to.
        Permissions groupPerms = getGroupPerms( bundle, userId, permissionType );
        permissions |= groupPerms.value();
        return new Permissions(permissions);
	}
	
	private Permissions getGroupPerms(PermissionsCacheEntry bundle, long userId, PermissionType permissionType) {
        long permissions = 0;
        try {
            User user = (User) userManager.loadUserByUserId(userId);
            List<Group> groups = groupManager.findGroupsOfUser(user.getUsername());
            for (Group group : groups) {
            	long perms = bundle.getGroupPerms(group.getId(), permissionType);
            	permissions |= perms;
			}
        }
        catch (Exception unfe) {
            log.error(unfe.getMessage(), unfe);
        }
        return new Permissions( permissions );
    }

	public Permissions getFinalGroupPerms(long groupId, String aceId, PermissionType permissionType) {
		// get the permissions bundle
        PermissionsCacheEntry bundle = getPermissionsCacheEntry(aceId);
        long permissions = bundle.getGroupPerms(groupId, permissionType);
        return new Permissions(permissions);
	}

	public Permissions getPermissions(long userId, String aceId) {
        Permissions permissionUnion = new Permissions(Permissions.NONE);

        Permissions grantedPermissions = getFinalUserPerms(userId, aceId, PermissionType.ADDITIVE);

        Permissions revokedPermissions = getFinalUserPerms(userId, aceId, PermissionType.NEGATIVE);

        permissionUnion.set(grantedPermissions.value(), true);
        permissionUnion.set(revokedPermissions.value(), false);

        return permissionUnion;
	}
	
	public PermissionsCacheEntry getPermissionsCacheEntry(String aceId) {
        PermissionsCacheEntry bundle = permsCache.get(aceId);
        if (bundle == null) {
            synchronized (aceId) {
                try {
                    // Load all user permissions.
                	List<Perms> userPerms = permsDao.findUserPerms(aceId);

                    LongList additiveUserIDs = new LongList();
                    LongList negativeUserIDs = new LongList();
                    LongList additiveUserPerms = new LongList();
                    LongList negativeUserPerms = new LongList();
                    
                    for (Perms perms : userPerms) {
                    	int type = perms.getType();
                    	long userId = perms.getSid();
                    	long permission = perms.getPermissions();
                    	
                    	if (type == PermissionType.NEGATIVE.getId()) {
                            int index = negativeUserIDs.indexOf(userId);
                            if (index != -1) {
                                permission |= negativeUserPerms.get(index);
                                negativeUserPerms.remove(index);
                                negativeUserIDs.remove(index);
                            }
                            negativeUserIDs.add(userId);
                            negativeUserPerms.add(permission);
                        }
                        // Permission set for a particular user.
                        else {
                            int index = additiveUserIDs.indexOf(userId);
                            if (index != -1) {
                                permission |= additiveUserPerms.get(index);
                                additiveUserPerms.remove(index);
                                additiveUserIDs.remove(index);
                            }
                            additiveUserIDs.add(userId);
                            additiveUserPerms.add(permission);
                        }
					}

                 
                    List<Perms> groupPerms = permsDao.findGroupPerms(aceId);
                    LongList additiveGroupIDs = new LongList();
                    LongList negativeGroupIDs = new LongList();
                    LongList additiveGroupPerms = new LongList();
                    LongList negativeGroupPerms = new LongList();

                    for (Perms perms : groupPerms) {
                        long groupId = perms.getSid();
                        int type = perms.getType();
                        long permission = perms.getPermissions();
                        
                        if (type == PermissionType.NEGATIVE.getId()) {
                            int index = negativeGroupIDs.indexOf(groupId);
                            if (index != -1) {
                                permission |= negativeGroupPerms.get(index);
                                negativeGroupPerms.remove(index);
                                negativeGroupIDs.remove(index);
                            }
                            negativeGroupIDs.add(groupId);
                            negativeGroupPerms.add(permission);
                        }
                        else {
                            int index = additiveGroupIDs.indexOf(groupId);
                            if (index != -1) {
                                permission |= additiveGroupPerms.get(index);
                                additiveGroupPerms.remove(index);
                                additiveGroupIDs.remove(index);
                            }
                            additiveGroupIDs.add(groupId);
                            additiveGroupPerms.add(permission);
                        }
                    }

                    // Create permissions bundle
                    bundle = new PermissionsCacheEntry(
                            additiveUserIDs.toArray(), negativeUserIDs.toArray(),
                            additiveUserPerms.toArray(), negativeUserPerms.toArray(),
                            additiveGroupIDs.toArray(), negativeGroupIDs.toArray(),
                            additiveGroupPerms.toArray(), negativeGroupPerms.toArray());

                    // Add the bundle to cache for use later.
                    permsCache.put(aceId, bundle);
                }
                catch (DataAccessException e) {
                    log.error(e.getMessage(), e);
                }
            }
        }
        return bundle;
    }
	
	public static class PermissionsCacheEntry implements Serializable {
		private static final long serialVersionUID = 1839868332817367942L;
		private long[] additiveUserIds;
        private long[] negativeUserIds;
        private long[] additiveUserPerms;
        private long[] negativeUserPerms;
        private long[] additiveGroupIds;
        private long[] negativeGroupIds;
        private long[] additiveGroupPerms;
        private long[] negativeGroupPerms;
        public PermissionsCacheEntry(long[] additiveUserIds,
                long[] negativeUserIds, long[] additiveUserPerms, long[] negativeUserPerms,
                long[] additiveGroupIds, long[] negativeGroupIds, long[] additiveGroupPerms,
                long[] negativeGroupPerms)
        {
            if (additiveUserIds.length != additiveUserPerms.length
                    || negativeUserIds.length != negativeUserPerms.length
                    || additiveGroupIds.length != additiveGroupPerms.length
                    || negativeGroupIds.length != negativeGroupPerms.length)
            {
                throw new IllegalArgumentException("Array lengths must match.");
            }

            this.additiveUserIds = additiveUserIds;
            this.negativeUserIds = negativeUserIds;
            this.additiveUserPerms = additiveUserPerms;
            this.negativeUserPerms = negativeUserPerms;
            this.additiveGroupIds = additiveGroupIds;
            this.negativeGroupIds = negativeGroupIds;
            this.additiveGroupPerms = additiveGroupPerms;
            this.negativeGroupPerms = negativeGroupPerms;

            // Sort arrays so that we can do binary searches on userID and groupID. We sort both
            // arrays at the same time using a special sort method.
            sort(additiveUserIds, additiveUserPerms);
            sort(negativeUserIds, negativeUserPerms);
            sort(additiveGroupIds, additiveGroupPerms);
            sort(negativeGroupIds, negativeGroupPerms);
        }
        
        public long getUserPerms(long userId, PermissionType permissionType) {
            if (PermissionType.NEGATIVE == permissionType) {
                // Search for the specified userID.
                int index = Arrays.binarySearch(negativeUserIds, userId);
                // If it's found, return the permission value.
                if (index >= 0) {
                    return negativeUserPerms[index];
                }
                else {
                    return Permissions.NONE;
                }
            }
            else {
                // Search for the specified userID.
                int index = Arrays.binarySearch(additiveUserIds, userId);
                // If it's found, return the permission value.
                if (index >= 0) {
                    return additiveUserPerms[index];
                }
                else {
                    return Permissions.NONE;
                }
            }
        }
        
        
        public long getGroupPerms(long groupId, PermissionType permissionType) {
            if (PermissionType.NEGATIVE == permissionType) {
                // Search for the specified groupID.
                int index = Arrays.binarySearch(negativeGroupIds, groupId);
                // If it's found, return the permission value.
                if (index >= 0) {
                    return negativeGroupPerms[index];
                }
                else {
                    return Permissions.NONE;
                }
            }
            else {
                // Search for the specified groupID.
                int index = Arrays.binarySearch(additiveGroupIds, groupId);
                // If it's found, return the permission value.
                if (index >= 0) {
                    return additiveGroupPerms[index];
                }
                else {
                    return Permissions.NONE;
                }
            }
        }

        
        /**
         * Special version of selection sort. Instead of sorting a single array, it sorts two arrays
         * based on the values in the first. This implies the two arrays are correlated. We could
         * accomplish the same thing more elegantly using custom objects and a Comparator, but this
         * method is used for maximum speed and minimal memory usage.<p>
         * <p/>
         * Both arrays must be the same size.
         *
         * @param array1 the array to sort values on.
         * @param array2 the array to sort based on the values in <tt>array1</tt>.
         */
        private static void sort(long[] array1, long[] array2) {
            int left = 0;
            int right = array1.length - 1;
            int max, j;
            long temp;
            for (int i = right; i > left; i--) {
                max = 0;
                // Find largest non-sorted item in array.
                for (j = left + 1; j <= i; j++) {
                    if (array1[max] < array1[j]) {
                        max = j;
                    }
                }
                // Swap elements in array1
                temp = array1[i];
                array1[i] = array1[max];
                array1[max] = temp;
                // Also swap elements in array2
                temp = array2[i];
                array2[i] = array2[max];
                array2[max] = temp;
            }
        }
	}

	public void setEventDispatcher(EventDispatcher arg0) {
		this.eventDispatcher = arg0;
	}
	
	public void removeAllUserPermissions(long userId, PermissionType permissionType) {
		permsDao.removeAllUserPermissions(userId, permissionType.getId());
		permsCache.clear();
	}
	public void removeAllGroupPermissions(long groupId, PermissionType permissionType) {
		permsDao.removeAllGroupPermissions(groupId, permissionType.getId());
		permsCache.clear();
	}
	
	private void checkPermission(long permission){
		if (permission < 1) {
            throw new IllegalArgumentException("Permission value negative: " + permission);
        }
	}
	
	public Map<String, Permissions> getPermissions(User user) {
		List<Perms> userPerms = permsDao.findUserPerms(user.getUserId());
		List<Perms> groupPerms = permsDao.findGroupPermsByUsername(user.getUsername());
		
		//additive permissions
		Map<String,Permissions> additivePermsMap = new HashMap<String,Permissions>();
		for (Perms perms : userPerms) {
			if(perms.getType() == PermissionType.ADDITIVE.getId()){
				addToMap(additivePermsMap, perms.getAceId(), perms.getPermissions(), true);
			}
		}
		for (Perms perms : groupPerms) {
			if(perms.getType() == PermissionType.ADDITIVE.getId()){
				addToMap(additivePermsMap, perms.getAceId(), perms.getPermissions(), true);
			}
		}
		
		//negative permissions
		Map<String,Permissions> negativePermsMap = new HashMap<String,Permissions>();
		for (Perms perms : userPerms) {
			if(perms.getType() == PermissionType.NEGATIVE.getId()){
				addToMap(negativePermsMap, perms.getAceId(), perms.getPermissions(), false);
			}
		}
		for (Perms perms : groupPerms) {
			if(perms.getType() == PermissionType.NEGATIVE.getId()){
				addToMap(negativePermsMap, perms.getAceId(), perms.getPermissions(), false);
			}
		}
		
		//union
		for(Map.Entry<String,Permissions> en: negativePermsMap.entrySet()){
			addToMap(additivePermsMap, en.getKey(), en.getValue().value(), false);
		}
		return additivePermsMap;
	}
	
	protected static void addToMap(Map<String,Permissions> map, String aceId, long permissions, boolean additive){
		Permissions perms = map.get(aceId);
		if(perms == null){
			perms = new Permissions(Permissions.NONE);
		}
		perms.set(permissions, additive);
		if(perms.value() > 0){
			map.put(aceId, perms);
		}else{
			map.remove(aceId);
		}
	}
}
