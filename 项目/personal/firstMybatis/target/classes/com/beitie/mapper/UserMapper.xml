<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
 mapper为映射的根节点，namespace指定Dao接口的完整类名
mybatis会依据这个接口动态创建一个实现类去实现这个接口，
而这个实现类是一个Mapper对象-->
<mapper namespace="com.beitie.mapper.UserMapper">

    <resultMap id="findUsersInfo" type="user">
        <id property="uid" column="uid"></id>
        <result property="uname" column="uname"></result>
        <result property="uaddress" column="uaddress"></result>
        <collection property="orders" ofType="orders" column="uid" select="findOrdersByUserId">
        </collection>
    </resultMap>


    <select id="findOrdersByUserId" resultType="orders">
        select * from orders where user_id=#{uid};
    </select>
    <!-- 根据uid查询一个用户信息 -->
    <select id="selectUserById" parameterType="Integer"
            resultType="com.beitie.bean.User">
        select * from users where uid = #{uid} and delete_flag =0;
    </select>
    <!-- 查询所有用户信息 -->
    <select id="selectAllUser"  resultMap="findUsersInfo">
        select * from users ;
    </select>
    <!-- 添加一个用户，#{uname}为 com.mybatis.po.MyUser 的属性值 -->
    <insert id="addUser" parameterType="user" useGeneratedKeys="true">
        insert into users (uid,uname,uage,usex,uaddress,ugrade)
        values(#{uid},#{uname},#{uage},#{usex},#{uaddress},#{ugrade})
    </insert>
    <!--修改一个用户 -->
    <update id="updateUser" parameterType="user" useGeneratedKeys="true">
        update users set uname =

        #{uname},uage = #{uage},usex = #{usex},uaddress = #{uaddress},
        ugrade = #{ugrade} where uid = #{uid}
    </update>
    <!-- 删除一个用户 -->
    <delete id="deleteUser" parameterType="Integer" >
        delete from users where uid = #{uid};
    </delete>

    <update id="updateUsersForDeleteUsers" parameterType="Integer">
        update users set delete_flag=1 where uid =#{uid}
    </update>
</mapper>
