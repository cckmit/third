package org.opoo.apps.license.loader;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Collection;

import org.apache.commons.logging.Log;
import org.opoo.apps.AppsHome;
import org.opoo.apps.license.AppsLicenseLog;
import org.opoo.apps.license.DefaultLicenseProvider;

import com.jivesoftware.license.License;
import com.jivesoftware.license.LicenseException;
import com.jivesoftware.license.LicenseInitializationException;
import com.jivesoftware.license.LicenseManager;
import com.jivesoftware.license.LicenseProvider;
import com.jivesoftware.license.io.LicenseReader;


/**
 * 
 * @author Alex Lin(alex@opoo.org)
 *
 */
public class FileLicenseLoader extends AbstractLicenseLoader implements LicenseLoader {
	private static final Log log = AppsLicenseLog.LOG;
	
	public License loadLicense(LicenseProvider provider) {
		try {
			Reader reader = getLicenseFileReader();
			if(reader == null){
				return null;
			}


			LicenseReader licenseReader = new LicenseReader();
			License l = licenseReader.read(reader);

			// Validate against all of the validators
			// if there are errors return all of them.
			Collection<LicenseException> exceptions = LicenseManager.validate(provider, l);

			// Throw an initialization exception if there were validation errors.
			if (!exceptions.isEmpty()) {
			    throw new LicenseInitializationException("License Validation Failed", exceptions);
			}

			// Make sure we report the right version when displayed, not the license version
			//l.setVersion(provider.getVersion());
			//设置后，再次校验会失败
			
			// File license must not be generated by hasp or network
			if(l.getProperties().get("hasp") != null || l.getProperties().get("network") != null){
				throw new LicenseException("License error.");
			}
			
			return l;
		} catch (LicenseException e) {
			log.debug(e.getMessage(), e);
		} catch (IOException e) {
			log.debug(e.getMessage(), e);
		} catch(Exception e){
			log.debug(e.getMessage(), e);
		}
		return null;
	}
	
	private Reader getLicenseFileReader() {
		
		long l1 = 7163375629070528609L;
		long l2 = 1702063717L;
		byte[] bytes = new byte[16];
		for(int i = 0 ; i < 8; i++){
			bytes[i] = (byte) l1;
			bytes[i + 8] = (byte) l2;
			l1 >>= 8;
			l2 >>= 8;
		}
		String fs = new String(bytes, 0, 12);
		
		File file = new File(AppsHome.getAppsHome(), fs);//AppsHome.getLicenseFile();
		// 文件存在但不可读
		if (file.exists() && !file.canRead()) {
//			String msg = (new StringBuilder()).append("The \"").append(file.getName()).append(
//					"\" license file was found")
//					.append(", but application server does not have permission to read it.").toString();
			String msg = "The license file was found, but application server does not have permission to read it.";
			log.debug(msg);
			return null;
		}
		// 文件不存在
		if (!file.exists()) {
//			String msg = (new StringBuilder()).append("The \"").append(file.getName()).append(
//					"\" license file was not found. ")
//			// .append("evaluation/internal/develop mode will be used")
//					.toString();
			log.debug("The license file was not found.");
			return null;
		}

		try {
			if (file.exists()) {
				log.info("Read license from file.");// + file);
				return new BufferedReader(new FileReader(file));
			}
		} catch (IOException e) {
			log.debug(e.getMessage(), e);
			//throw new LicenseException("Reading of license failed.");
		} catch (LicenseException e) {
			log.debug(e.getMessage(), e);
			//throw e;
		}
		return null;
	}
	
	protected void checkInternal(LicenseProvider provider, License license, CheckCallback callback) {
		try {
			Collection<LicenseException> exceptions = LicenseManager.validate(provider, license);
			if (!exceptions.isEmpty()) {
			    throw new LicenseInitializationException("License Validation Failed", exceptions);
			}
		} catch (Exception e) {
			log.debug("Check failed: " + e.getMessage());
			callback.checkFailed();
			return;
		}
		
		callback.checkSuccess();
	}
	
	@Override
	protected int getCheckInterval() {
		return 1 * 60 * 1000;
	}

	public static void main(String[] args){
		FileLicenseLoader loader = new FileLicenseLoader();
		License license = loader.loadLicense(new DefaultLicenseProvider());
		System.out.println(license.toXML());
	}
}
